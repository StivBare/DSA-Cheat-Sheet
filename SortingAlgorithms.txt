----- QUADRATIC SORTING -----

// Bubble Sort

function bubbleSort(arr) {

  let noSwaps;

  for(let i = arr.length; i > 0; i--) {
    noSwaps = true;
    for(let j = 0; j < i - 1; j++) {
      if(arr[j] > arr[j + 1]) {
        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];
        noSwaps = false; 
      }
    }

    if (noSwaps) break;
  }

  return arr;
}

// Selection Sort

function selectionSort(arr) {

  for (let i = 0; i < arr.length; i++) {
    let min = i;
    for (let j = i + 1; j < arr.length; j++) {
      if (arr[min] > arr[j]) {
        min = j;
      }
    }
     
    if (i !== min) {
      [arr[i], arr[min]] = [arr[min], arr[i]]; 
    }
  }

  return arr;
}

// Insertion Sort

function insertionSort(arr){

  for(let i = 1; i < arr.length; i++) {
    let currentVal = arr[i];
    for (let j = i - 1; j >= 0 && arr[j] > currentVal; j--) {
      arr[j + 1] = arr[j];
      arr[j] = currentVal
    }
  }
  
  return arr;
}


----- EFFICIENT SORTING -----

// Merge Sort

function merge(arr1, arr2) {
    let results = [];
    let i = 0;
    let j = 0;
    while(i < arr1.length || j < arr2.length) {
        if (arr2[j] >= arr1[i] || j >= arr2.length) {
            results.push(arr1[i]);
            i++;
        } else if (arr1[i] > arr2[j] || i >= arr1.length){
            results.push(arr2[j]);
            j++;
        }
    }

    return results;
}

function mergeSort(arr) {
    if (arr.length <= 1) return arr;
    let mid = Math.floor(arr.length/2);
    let left = mergeSort(arr.slice(0,mid));
    let right = mergeSort(arr.slice(mid));
    return merge(left, right);
}

// Quick Sort

function pivot(arr, start=0, end=arr.length+1) {
   
    function swap(array, i, j) {
        [array[i], array[j]] = [array[j], array[i]];
    }

    let pivot = arr[start];
    let swapIndex = start;

    for(let i = start + 1; i < arr.length; i++){
        if(pivot > arr[i]) {
            swapIndex++;
            swap(arr, swapIndex, i)
        }
    }

    swap(arr, start, swapIndex)
    return swapIndex;
}

function quickSort(arr, left = 0, right = arr.length - 1) {
    if(left < right) {
        let pivotIndex = pivot(arr, left, right);
        quickSort(arr, left, pivotIndex - 1);
        quickSort(arr, pivotIndex + 1, right);
    }

    return arr;
}

// Radix Sort

function getDigit(num, i) {
    return Math.floor(Math.abs(num) / Math.pow(10, i)) % 10;
}

function digitCount(num) {
    if (num === 0) return 1;
    return Math.floor(Math.log10(Math.abs(num))) + 1;
}

function mostDigits(nums) {
    let maxDigits = 0;
    for (let i=0; i < nums.length; i++)  {
        maxDigits = Math.max(maxDigits, digitCount(nums[i]));
    }
    return maxDigits;
}

function radixSort(nums) {
    let maxDigitCount = mostDigits(nums)
    for (let k = 0; k < maxDigitCount; k++) {
        let digitBuckets = Array.from({length: 10}, () => []);
        for (let i = 0; i < nums.length; i++) {
            let digit = getDigit(nums[i], k);
            digitBuckets[digit].push(nums[i])
        }
        nums = [].concat(...digitBuckets);
    }
    return nums;
}


