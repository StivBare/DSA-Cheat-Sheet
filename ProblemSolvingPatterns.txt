// Frequency Counter Pattern

function validAnagram(str1, str2){
  
  if (str1.length !== str2.length) {
      return false;
  }
  
  let str1Obj = {};
  let str2Obj = {};
  
  for (let x of str1) {
      str1Obj[x] = (str1Obj[x] || 0) + 1;
  }
  
  for (let y of str2) {
      str2Obj[y] = (str2Obj[y] || 0) + 1;
  }
  
  for (let z in str1Obj) {
      if (!(z in str2Obj)) {
          return false;
      } else if (str1Obj[z] !== str2Obj[z]) {
          return false;
      }
  }
  
  return true
}

// Multiple Pointer Pattern

function countUniqueValues(arr) {

  if(arr.length === 0) return 0;
  let i = 0;
  
  for(let j = 1; j < arr.length; j++) {
    if(arr[i] !== arr[j]) {
      i++;
      arr[i] = arr[j];
    }
  }
  
  return i + 1; 
}

// Sliding Window Pattern

function maxSubarraySum(arr, num) {
    let maxSum = 0;
    let tempSum = 0;

    if (arr.length < num) return null;

    for (let i = 0; i < num; i++) {
        maxSum += arr[i];
    }

    tempSum = maxSum;

    for (let i = num; i < arr.length; i++) {
        tempSum = tempSum - arr[i - num] + arr[i];
        maxSum = Math.max(maxSum, tempSum);
    }

    return maxSum;
}

// Divide and Conquer

function search(arr, val) {
    let min = 0;
    let max = arr.length - 1;

    while (min <= max) {
        let middle = Math.floor((min + max) / 2);
        let currentElement = arr[middle];

        if (arr[middle] < val) {
            min = middle + 1;
        }
        else if (arr[middle] > val) {
            max = middle - 1;
        }
        else {
            return middle;
        }
    }

    return -1;
}
